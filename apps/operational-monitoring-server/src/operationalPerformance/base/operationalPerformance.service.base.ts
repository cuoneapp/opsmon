/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  OperationalPerformance as PrismaOperationalPerformance,
} from "@prisma/client";

export class OperationalPerformanceServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.OperationalPerformanceCountArgs, "select">
  ): Promise<number> {
    return this.prisma.operationalPerformance.count(args);
  }

  async operationalPerformances(
    args: Prisma.OperationalPerformanceFindManyArgs
  ): Promise<PrismaOperationalPerformance[]> {
    return this.prisma.operationalPerformance.findMany(args);
  }
  async operationalPerformance(
    args: Prisma.OperationalPerformanceFindUniqueArgs
  ): Promise<PrismaOperationalPerformance | null> {
    return this.prisma.operationalPerformance.findUnique(args);
  }
  async createOperationalPerformance(
    args: Prisma.OperationalPerformanceCreateArgs
  ): Promise<PrismaOperationalPerformance> {
    return this.prisma.operationalPerformance.create(args);
  }
  async updateOperationalPerformance(
    args: Prisma.OperationalPerformanceUpdateArgs
  ): Promise<PrismaOperationalPerformance> {
    return this.prisma.operationalPerformance.update(args);
  }
  async deleteOperationalPerformance(
    args: Prisma.OperationalPerformanceDeleteArgs
  ): Promise<PrismaOperationalPerformance> {
    return this.prisma.operationalPerformance.delete(args);
  }
}
