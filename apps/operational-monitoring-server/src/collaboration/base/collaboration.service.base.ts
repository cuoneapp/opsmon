/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Collaboration as PrismaCollaboration } from "@prisma/client";

export class CollaborationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CollaborationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.collaboration.count(args);
  }

  async collaborations(
    args: Prisma.CollaborationFindManyArgs
  ): Promise<PrismaCollaboration[]> {
    return this.prisma.collaboration.findMany(args);
  }
  async collaboration(
    args: Prisma.CollaborationFindUniqueArgs
  ): Promise<PrismaCollaboration | null> {
    return this.prisma.collaboration.findUnique(args);
  }
  async createCollaboration(
    args: Prisma.CollaborationCreateArgs
  ): Promise<PrismaCollaboration> {
    return this.prisma.collaboration.create(args);
  }
  async updateCollaboration(
    args: Prisma.CollaborationUpdateArgs
  ): Promise<PrismaCollaboration> {
    return this.prisma.collaboration.update(args);
  }
  async deleteCollaboration(
    args: Prisma.CollaborationDeleteArgs
  ): Promise<PrismaCollaboration> {
    return this.prisma.collaboration.delete(args);
  }
}
