/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  ExecutiveSummary as PrismaExecutiveSummary,
} from "@prisma/client";

export class ExecutiveSummaryServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ExecutiveSummaryCountArgs, "select">
  ): Promise<number> {
    return this.prisma.executiveSummary.count(args);
  }

  async executiveSummaries(
    args: Prisma.ExecutiveSummaryFindManyArgs
  ): Promise<PrismaExecutiveSummary[]> {
    return this.prisma.executiveSummary.findMany(args);
  }
  async executiveSummary(
    args: Prisma.ExecutiveSummaryFindUniqueArgs
  ): Promise<PrismaExecutiveSummary | null> {
    return this.prisma.executiveSummary.findUnique(args);
  }
  async createExecutiveSummary(
    args: Prisma.ExecutiveSummaryCreateArgs
  ): Promise<PrismaExecutiveSummary> {
    return this.prisma.executiveSummary.create(args);
  }
  async updateExecutiveSummary(
    args: Prisma.ExecutiveSummaryUpdateArgs
  ): Promise<PrismaExecutiveSummary> {
    return this.prisma.executiveSummary.update(args);
  }
  async deleteExecutiveSummary(
    args: Prisma.ExecutiveSummaryDeleteArgs
  ): Promise<PrismaExecutiveSummary> {
    return this.prisma.executiveSummary.delete(args);
  }
}
