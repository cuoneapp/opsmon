/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, PeriodicTask as PrismaPeriodicTask } from "@prisma/client";

export class PeriodicTaskServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PeriodicTaskCountArgs, "select">
  ): Promise<number> {
    return this.prisma.periodicTask.count(args);
  }

  async periodicTasks(
    args: Prisma.PeriodicTaskFindManyArgs
  ): Promise<PrismaPeriodicTask[]> {
    return this.prisma.periodicTask.findMany(args);
  }
  async periodicTask(
    args: Prisma.PeriodicTaskFindUniqueArgs
  ): Promise<PrismaPeriodicTask | null> {
    return this.prisma.periodicTask.findUnique(args);
  }
  async createPeriodicTask(
    args: Prisma.PeriodicTaskCreateArgs
  ): Promise<PrismaPeriodicTask> {
    return this.prisma.periodicTask.create(args);
  }
  async updatePeriodicTask(
    args: Prisma.PeriodicTaskUpdateArgs
  ): Promise<PrismaPeriodicTask> {
    return this.prisma.periodicTask.update(args);
  }
  async deletePeriodicTask(
    args: Prisma.PeriodicTaskDeleteArgs
  ): Promise<PrismaPeriodicTask> {
    return this.prisma.periodicTask.delete(args);
  }
}
