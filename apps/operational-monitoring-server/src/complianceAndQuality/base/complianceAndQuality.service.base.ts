/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  ComplianceAndQuality as PrismaComplianceAndQuality,
} from "@prisma/client";

export class ComplianceAndQualityServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ComplianceAndQualityCountArgs, "select">
  ): Promise<number> {
    return this.prisma.complianceAndQuality.count(args);
  }

  async complianceAndQualities(
    args: Prisma.ComplianceAndQualityFindManyArgs
  ): Promise<PrismaComplianceAndQuality[]> {
    return this.prisma.complianceAndQuality.findMany(args);
  }
  async complianceAndQuality(
    args: Prisma.ComplianceAndQualityFindUniqueArgs
  ): Promise<PrismaComplianceAndQuality | null> {
    return this.prisma.complianceAndQuality.findUnique(args);
  }
  async createComplianceAndQuality(
    args: Prisma.ComplianceAndQualityCreateArgs
  ): Promise<PrismaComplianceAndQuality> {
    return this.prisma.complianceAndQuality.create(args);
  }
  async updateComplianceAndQuality(
    args: Prisma.ComplianceAndQualityUpdateArgs
  ): Promise<PrismaComplianceAndQuality> {
    return this.prisma.complianceAndQuality.update(args);
  }
  async deleteComplianceAndQuality(
    args: Prisma.ComplianceAndQualityDeleteArgs
  ): Promise<PrismaComplianceAndQuality> {
    return this.prisma.complianceAndQuality.delete(args);
  }
}
