/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, TaskAssignment as PrismaTaskAssignment } from "@prisma/client";

export class TaskAssignmentServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.TaskAssignmentCountArgs, "select">
  ): Promise<number> {
    return this.prisma.taskAssignment.count(args);
  }

  async taskAssignments(
    args: Prisma.TaskAssignmentFindManyArgs
  ): Promise<PrismaTaskAssignment[]> {
    return this.prisma.taskAssignment.findMany(args);
  }
  async taskAssignment(
    args: Prisma.TaskAssignmentFindUniqueArgs
  ): Promise<PrismaTaskAssignment | null> {
    return this.prisma.taskAssignment.findUnique(args);
  }
  async createTaskAssignment(
    args: Prisma.TaskAssignmentCreateArgs
  ): Promise<PrismaTaskAssignment> {
    return this.prisma.taskAssignment.create(args);
  }
  async updateTaskAssignment(
    args: Prisma.TaskAssignmentUpdateArgs
  ): Promise<PrismaTaskAssignment> {
    return this.prisma.taskAssignment.update(args);
  }
  async deleteTaskAssignment(
    args: Prisma.TaskAssignmentDeleteArgs
  ): Promise<PrismaTaskAssignment> {
    return this.prisma.taskAssignment.delete(args);
  }
}
