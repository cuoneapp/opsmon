/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Knowledgebase as PrismaKnowledgebase } from "@prisma/client";

export class KnowledgebaseServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.KnowledgebaseCountArgs, "select">
  ): Promise<number> {
    return this.prisma.knowledgebase.count(args);
  }

  async knowledgebases(
    args: Prisma.KnowledgebaseFindManyArgs
  ): Promise<PrismaKnowledgebase[]> {
    return this.prisma.knowledgebase.findMany(args);
  }
  async knowledgebase(
    args: Prisma.KnowledgebaseFindUniqueArgs
  ): Promise<PrismaKnowledgebase | null> {
    return this.prisma.knowledgebase.findUnique(args);
  }
  async createKnowledgebase(
    args: Prisma.KnowledgebaseCreateArgs
  ): Promise<PrismaKnowledgebase> {
    return this.prisma.knowledgebase.create(args);
  }
  async updateKnowledgebase(
    args: Prisma.KnowledgebaseUpdateArgs
  ): Promise<PrismaKnowledgebase> {
    return this.prisma.knowledgebase.update(args);
  }
  async deleteKnowledgebase(
    args: Prisma.KnowledgebaseDeleteArgs
  ): Promise<PrismaKnowledgebase> {
    return this.prisma.knowledgebase.delete(args);
  }
}
