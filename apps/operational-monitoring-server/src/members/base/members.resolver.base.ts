/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Members } from "./Members";
import { MembersCountArgs } from "./MembersCountArgs";
import { MembersFindManyArgs } from "./MembersFindManyArgs";
import { MembersFindUniqueArgs } from "./MembersFindUniqueArgs";
import { CreateMembersArgs } from "./CreateMembersArgs";
import { UpdateMembersArgs } from "./UpdateMembersArgs";
import { DeleteMembersArgs } from "./DeleteMembersArgs";
import { MembersService } from "../members.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Members)
export class MembersResolverBase {
  constructor(
    protected readonly service: MembersService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Members",
    action: "read",
    possession: "any",
  })
  async _membersItemsMeta(
    @graphql.Args() args: MembersCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Members])
  @nestAccessControl.UseRoles({
    resource: "Members",
    action: "read",
    possession: "any",
  })
  async membersItems(
    @graphql.Args() args: MembersFindManyArgs
  ): Promise<Members[]> {
    return this.service.membersItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Members, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Members",
    action: "read",
    possession: "own",
  })
  async members(
    @graphql.Args() args: MembersFindUniqueArgs
  ): Promise<Members | null> {
    const result = await this.service.members(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Members)
  @nestAccessControl.UseRoles({
    resource: "Members",
    action: "create",
    possession: "any",
  })
  async createMembers(
    @graphql.Args() args: CreateMembersArgs
  ): Promise<Members> {
    return await this.service.createMembers({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Members)
  @nestAccessControl.UseRoles({
    resource: "Members",
    action: "update",
    possession: "any",
  })
  async updateMembers(
    @graphql.Args() args: UpdateMembersArgs
  ): Promise<Members | null> {
    try {
      return await this.service.updateMembers({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Members)
  @nestAccessControl.UseRoles({
    resource: "Members",
    action: "delete",
    possession: "any",
  })
  async deleteMembers(
    @graphql.Args() args: DeleteMembersArgs
  ): Promise<Members | null> {
    try {
      return await this.service.deleteMembers(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
