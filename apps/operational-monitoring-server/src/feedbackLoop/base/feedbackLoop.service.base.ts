/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, FeedbackLoop as PrismaFeedbackLoop } from "@prisma/client";

export class FeedbackLoopServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.FeedbackLoopCountArgs, "select">
  ): Promise<number> {
    return this.prisma.feedbackLoop.count(args);
  }

  async feedbackLoops(
    args: Prisma.FeedbackLoopFindManyArgs
  ): Promise<PrismaFeedbackLoop[]> {
    return this.prisma.feedbackLoop.findMany(args);
  }
  async feedbackLoop(
    args: Prisma.FeedbackLoopFindUniqueArgs
  ): Promise<PrismaFeedbackLoop | null> {
    return this.prisma.feedbackLoop.findUnique(args);
  }
  async createFeedbackLoop(
    args: Prisma.FeedbackLoopCreateArgs
  ): Promise<PrismaFeedbackLoop> {
    return this.prisma.feedbackLoop.create(args);
  }
  async updateFeedbackLoop(
    args: Prisma.FeedbackLoopUpdateArgs
  ): Promise<PrismaFeedbackLoop> {
    return this.prisma.feedbackLoop.update(args);
  }
  async deleteFeedbackLoop(
    args: Prisma.FeedbackLoopDeleteArgs
  ): Promise<PrismaFeedbackLoop> {
    return this.prisma.feedbackLoop.delete(args);
  }
}
