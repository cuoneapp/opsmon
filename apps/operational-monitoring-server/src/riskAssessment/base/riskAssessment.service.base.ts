/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, RiskAssessment as PrismaRiskAssessment } from "@prisma/client";

export class RiskAssessmentServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.RiskAssessmentCountArgs, "select">
  ): Promise<number> {
    return this.prisma.riskAssessment.count(args);
  }

  async riskAssessments(
    args: Prisma.RiskAssessmentFindManyArgs
  ): Promise<PrismaRiskAssessment[]> {
    return this.prisma.riskAssessment.findMany(args);
  }
  async riskAssessment(
    args: Prisma.RiskAssessmentFindUniqueArgs
  ): Promise<PrismaRiskAssessment | null> {
    return this.prisma.riskAssessment.findUnique(args);
  }
  async createRiskAssessment(
    args: Prisma.RiskAssessmentCreateArgs
  ): Promise<PrismaRiskAssessment> {
    return this.prisma.riskAssessment.create(args);
  }
  async updateRiskAssessment(
    args: Prisma.RiskAssessmentUpdateArgs
  ): Promise<PrismaRiskAssessment> {
    return this.prisma.riskAssessment.update(args);
  }
  async deleteRiskAssessment(
    args: Prisma.RiskAssessmentDeleteArgs
  ): Promise<PrismaRiskAssessment> {
    return this.prisma.riskAssessment.delete(args);
  }
}
