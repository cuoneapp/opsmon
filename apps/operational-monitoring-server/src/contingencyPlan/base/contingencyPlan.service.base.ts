/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  ContingencyPlan as PrismaContingencyPlan,
} from "@prisma/client";

export class ContingencyPlanServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ContingencyPlanCountArgs, "select">
  ): Promise<number> {
    return this.prisma.contingencyPlan.count(args);
  }

  async contingencyPlans(
    args: Prisma.ContingencyPlanFindManyArgs
  ): Promise<PrismaContingencyPlan[]> {
    return this.prisma.contingencyPlan.findMany(args);
  }
  async contingencyPlan(
    args: Prisma.ContingencyPlanFindUniqueArgs
  ): Promise<PrismaContingencyPlan | null> {
    return this.prisma.contingencyPlan.findUnique(args);
  }
  async createContingencyPlan(
    args: Prisma.ContingencyPlanCreateArgs
  ): Promise<PrismaContingencyPlan> {
    return this.prisma.contingencyPlan.create(args);
  }
  async updateContingencyPlan(
    args: Prisma.ContingencyPlanUpdateArgs
  ): Promise<PrismaContingencyPlan> {
    return this.prisma.contingencyPlan.update(args);
  }
  async deleteContingencyPlan(
    args: Prisma.ContingencyPlanDeleteArgs
  ): Promise<PrismaContingencyPlan> {
    return this.prisma.contingencyPlan.delete(args);
  }
}
