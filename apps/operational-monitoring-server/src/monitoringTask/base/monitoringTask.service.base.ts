/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, MonitoringTask as PrismaMonitoringTask } from "@prisma/client";

export class MonitoringTaskServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.MonitoringTaskCountArgs, "select">
  ): Promise<number> {
    return this.prisma.monitoringTask.count(args);
  }

  async monitoringTasks(
    args: Prisma.MonitoringTaskFindManyArgs
  ): Promise<PrismaMonitoringTask[]> {
    return this.prisma.monitoringTask.findMany(args);
  }
  async monitoringTask(
    args: Prisma.MonitoringTaskFindUniqueArgs
  ): Promise<PrismaMonitoringTask | null> {
    return this.prisma.monitoringTask.findUnique(args);
  }
  async createMonitoringTask(
    args: Prisma.MonitoringTaskCreateArgs
  ): Promise<PrismaMonitoringTask> {
    return this.prisma.monitoringTask.create(args);
  }
  async updateMonitoringTask(
    args: Prisma.MonitoringTaskUpdateArgs
  ): Promise<PrismaMonitoringTask> {
    return this.prisma.monitoringTask.update(args);
  }
  async deleteMonitoringTask(
    args: Prisma.MonitoringTaskDeleteArgs
  ): Promise<PrismaMonitoringTask> {
    return this.prisma.monitoringTask.delete(args);
  }
}
