/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { MonitoringTask } from "./MonitoringTask";
import { MonitoringTaskCountArgs } from "./MonitoringTaskCountArgs";
import { MonitoringTaskFindManyArgs } from "./MonitoringTaskFindManyArgs";
import { MonitoringTaskFindUniqueArgs } from "./MonitoringTaskFindUniqueArgs";
import { DeleteMonitoringTaskArgs } from "./DeleteMonitoringTaskArgs";
import { MonitoringTaskService } from "../monitoringTask.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => MonitoringTask)
export class MonitoringTaskResolverBase {
  constructor(
    protected readonly service: MonitoringTaskService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "MonitoringTask",
    action: "read",
    possession: "any",
  })
  async _monitoringTasksMeta(
    @graphql.Args() args: MonitoringTaskCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [MonitoringTask])
  @nestAccessControl.UseRoles({
    resource: "MonitoringTask",
    action: "read",
    possession: "any",
  })
  async monitoringTasks(
    @graphql.Args() args: MonitoringTaskFindManyArgs
  ): Promise<MonitoringTask[]> {
    return this.service.monitoringTasks(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => MonitoringTask, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "MonitoringTask",
    action: "read",
    possession: "own",
  })
  async monitoringTask(
    @graphql.Args() args: MonitoringTaskFindUniqueArgs
  ): Promise<MonitoringTask | null> {
    const result = await this.service.monitoringTask(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => MonitoringTask)
  @nestAccessControl.UseRoles({
    resource: "MonitoringTask",
    action: "delete",
    possession: "any",
  })
  async deleteMonitoringTask(
    @graphql.Args() args: DeleteMonitoringTaskArgs
  ): Promise<MonitoringTask | null> {
    try {
      return await this.service.deleteMonitoringTask(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
