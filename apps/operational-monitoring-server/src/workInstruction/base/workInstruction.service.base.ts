/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  WorkInstruction as PrismaWorkInstruction,
} from "@prisma/client";

export class WorkInstructionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.WorkInstructionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.workInstruction.count(args);
  }

  async workInstructions(
    args: Prisma.WorkInstructionFindManyArgs
  ): Promise<PrismaWorkInstruction[]> {
    return this.prisma.workInstruction.findMany(args);
  }
  async workInstruction(
    args: Prisma.WorkInstructionFindUniqueArgs
  ): Promise<PrismaWorkInstruction | null> {
    return this.prisma.workInstruction.findUnique(args);
  }
  async createWorkInstruction(
    args: Prisma.WorkInstructionCreateArgs
  ): Promise<PrismaWorkInstruction> {
    return this.prisma.workInstruction.create(args);
  }
  async updateWorkInstruction(
    args: Prisma.WorkInstructionUpdateArgs
  ): Promise<PrismaWorkInstruction> {
    return this.prisma.workInstruction.update(args);
  }
  async deleteWorkInstruction(
    args: Prisma.WorkInstructionDeleteArgs
  ): Promise<PrismaWorkInstruction> {
    return this.prisma.workInstruction.delete(args);
  }
}
