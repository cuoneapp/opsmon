/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Announcements } from "./Announcements";
import { AnnouncementsCountArgs } from "./AnnouncementsCountArgs";
import { AnnouncementsFindManyArgs } from "./AnnouncementsFindManyArgs";
import { AnnouncementsFindUniqueArgs } from "./AnnouncementsFindUniqueArgs";
import { CreateAnnouncementsArgs } from "./CreateAnnouncementsArgs";
import { UpdateAnnouncementsArgs } from "./UpdateAnnouncementsArgs";
import { DeleteAnnouncementsArgs } from "./DeleteAnnouncementsArgs";
import { AnnouncementsService } from "../announcements.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Announcements)
export class AnnouncementsResolverBase {
  constructor(
    protected readonly service: AnnouncementsService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Announcements",
    action: "read",
    possession: "any",
  })
  async _announcementsItemsMeta(
    @graphql.Args() args: AnnouncementsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Announcements])
  @nestAccessControl.UseRoles({
    resource: "Announcements",
    action: "read",
    possession: "any",
  })
  async announcementsItems(
    @graphql.Args() args: AnnouncementsFindManyArgs
  ): Promise<Announcements[]> {
    return this.service.announcementsItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Announcements, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Announcements",
    action: "read",
    possession: "own",
  })
  async announcements(
    @graphql.Args() args: AnnouncementsFindUniqueArgs
  ): Promise<Announcements | null> {
    const result = await this.service.announcements(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Announcements)
  @nestAccessControl.UseRoles({
    resource: "Announcements",
    action: "create",
    possession: "any",
  })
  async createAnnouncements(
    @graphql.Args() args: CreateAnnouncementsArgs
  ): Promise<Announcements> {
    return await this.service.createAnnouncements({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Announcements)
  @nestAccessControl.UseRoles({
    resource: "Announcements",
    action: "update",
    possession: "any",
  })
  async updateAnnouncements(
    @graphql.Args() args: UpdateAnnouncementsArgs
  ): Promise<Announcements | null> {
    try {
      return await this.service.updateAnnouncements({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Announcements)
  @nestAccessControl.UseRoles({
    resource: "Announcements",
    action: "delete",
    possession: "any",
  })
  async deleteAnnouncements(
    @graphql.Args() args: DeleteAnnouncementsArgs
  ): Promise<Announcements | null> {
    try {
      return await this.service.deleteAnnouncements(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
